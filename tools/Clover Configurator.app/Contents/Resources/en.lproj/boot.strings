
/* Class = "NSMenuItem"; title = "NoVPAJpeg"; ObjectID = "1AQ-Fn-G9y"; */
"1AQ-Fn-G9y.title" = "NoVPAJpeg";

/* Class = "NSMenu"; title = "AirportBrcmFixup"; ObjectID = "1XB-UL-K1E"; */
"1XB-UL-K1E.title" = "AirportBrcmFixup";

/* Class = "NSBox"; title = "Box"; ObjectID = "1kg-gk-ban"; */
"1kg-gk-ban.title" = "Box";

/* Class = "NSMenuItem"; title = "HibernationFixup"; ObjectID = "28B-o7-4QR"; */
"28B-o7-4QR.title" = "HibernationFixup";

/* Class = "NSMenu"; title = "NoVPAJpeg"; ObjectID = "2lx-Oc-JNa"; */
"2lx-Oc-JNa.title" = "NoVPAJpeg";

/* Class = "NSButton"; ibShadowedToolTip = "disable Clover's keyboard shortcuts"; ObjectID = "2ou-qM-F9Q"; */
"2ou-qM-F9Q.ibShadowedToolTip" = "disable Clover's keyboard shortcuts";

/* Class = "NSButton"; ibShadowedToolTip = "Skip the Hibernation timeout"; ObjectID = "3SI-Go-M3B"; */
"3SI-Go-M3B.ibShadowedToolTip" = "Skip the Hibernation timeout";

/* Class = "NSPopUpButton"; ibShadowedToolTip = "Policy for Secure Boot. Using WhiteList and BlackList require an array of allowed and denied binary"; ObjectID = "3c7-hz-Sd8"; */
"3c7-hz-Sd8.ibShadowedToolTip" = "Policy for Secure Boot. Using WhiteList and BlackList require an array of allowed and denied binary";

/* Class = "NSMenuItem"; title = "User"; ObjectID = "3ww-WE-Sc8"; */
"3ww-WE-Sc8.title" = "User";

/* Class = "NSButton"; ibShadowedToolTip = "<key>Debug</key>\n<false/>\nIf you are unable to boot into the Clover you can use this setting to produces a debug output to /EFI/CLOVER/misc/debug.log. This log then can be assessed to find out what the problem is. !WARNING turning on this log will dramatically increase loading time as it has to write the log to the disk as it goes. So please be patient and give plenty of time before reseting your computer."; ObjectID = "4Wo-7U-l4l"; */
"4Wo-7U-l4l.ibShadowedToolTip" = "<key>Debug</key>\n<false/>\nIf you are unable to boot into the Clover you can use this setting to produces a debug output to /EFI/CLOVER/misc/debug.log. This log then can be assessed to find out what the problem is. !WARNING turning on this log will dramatically increase loading time as it has to write the log to the disk as it goes. So please be patient and give plenty of time before reseting your computer.";

/* Class = "NSButtonCell"; title = "SignatureFixup"; ObjectID = "4rX-ou-Vrd"; */
"4rX-ou-Vrd.title" = "SignatureFixup";

/* Class = "NSTableColumn"; headerCell.title = "Whitelist"; ObjectID = "59v-8C-IRT"; */
"59v-8C-IRT.headerCell.title" = "Whitelist";

/* Class = "NSMenuItem"; title = "PBRsata"; ObjectID = "5Cg-Dw-6z7"; */
"5Cg-Dw-6z7.title" = "PBRsata";

/* Class = "NSButtonCell"; title = "Fast"; ObjectID = "5LP-3O-i4f"; */
"5LP-3O-i4f.title" = "Fast";

/* Class = "NSMenuItem"; title = "Lilu"; ObjectID = "5RY-Vn-NWe"; */
"5RY-Vn-NWe.title" = "Lilu";

/* Class = "NSMenuItem"; title = "Allow"; ObjectID = "6Xk-OR-Chz"; */
"6Xk-OR-Chz.title" = "Allow";

/* Class = "NSMenuItem"; title = "CPUFriend"; ObjectID = "6fK-no-jmD"; */
"6fK-no-jmD.title" = "CPUFriend";

/* Class = "NSTextField"; ibShadowedToolTip = "<key>Timeout</key>\n<integer>5</integer>\nThe boot loader will pause for 5 seconds after starting before automatically loading an operating system. If a key is pressed during this period of time, the countdown is stopped. Options:\n\n0 - GUI is not invoked, the OS is loaded instantly\n-1 - GUI is invoked, automatic OS loading is turned off\nClover must have be able to find a default entry for it to automatically boot into an OS.\n\nNOTE: If the Timeout integer is set to 0, hold any key when powering on to invoke the bootloader GUI."; ObjectID = "6h3-7F-Ex1"; */
"6h3-7F-Ex1.ibShadowedToolTip" = "<key>Timeout</key>\n<integer>5</integer>\nThe boot loader will pause for 5 seconds after starting before automatically loading an operating system. If a key is pressed during this period of time, the countdown is stopped. Options:\n\n0 - GUI is not invoked, the OS is loaded instantly\n-1 - GUI is invoked, automatic OS loading is turned off\nClover must have be able to find a default entry for it to automatically boot into an OS.\n\nNOTE: If the Timeout integer is set to 0, hold any key when powering on to invoke the bootloader GUI.";

/* Class = "NSBox"; title = "Arguments"; ObjectID = "6ph-2A-PZj"; */
"6ph-2A-PZj.title" = "Arguments";

/* Class = "NSTableView"; ibShadowedToolTip = "White list for Secure Boot (allowed). Policy must be set to WhiteList"; ObjectID = "6sX-vb-IgQ"; */
"6sX-vb-IgQ.ibShadowedToolTip" = "White list for Secure Boot (allowed). Policy must be set to WhiteList";

/* Class = "NSMenuItem"; title = "CPUFriend"; ObjectID = "7yW-Dq-Kdt"; */
"7yW-Dq-Kdt.title" = "CPUFriend";

/* Class = "NSButtonCell"; title = "DisableCloverHotkeys"; ObjectID = "Ak4-p4-dX6"; */
"Ak4-p4-dX6.title" = "DisableCloverHotkeys";

/* Class = "NSMenuItem"; title = "Deny"; ObjectID = "BGs-RK-ieY"; */
"BGs-RK-ieY.title" = "Deny";

/* Class = "NSButtonCell"; title = "Secure"; ObjectID = "BoV-W6-Qjb"; */
"BoV-W6-Qjb.title" = "Secure";

/* Class = "NSMenuItem"; title = "BT4LEContiunityFixup"; ObjectID = "C73-wN-DDm"; */
"C73-wN-DDm.title" = "BT4LEContiunityFixup";
/* Class = "NSButton"; ibShadowedToolTip = "In the case when ordinary boot failed the boot.efi can set flag \"recovery-boot-mode\". It is not reliable for us and we want just ignore this variable to boot ordinary."; ObjectID = "Ch7-ok-KtP"; */
"Ch7-ok-KtP.ibShadowedToolTip" = "In the case when ordinary boot failed the boot.efi can set flag \"recovery-boot-mode\". It is not reliable for us and we want just ignore this variable to boot ordinary.";

/* Class = "NSMenu"; title = "BT4LEContiunityFixup"; ObjectID = "Cjb-Fd-AP2"; */
"Cjb-Fd-AP2.title" = "BT4LEContiunityFixup";

/* Class = "NSMenuItem"; title = "VirtualSMC"; ObjectID = "DhR-fI-ee8"; */
"DhR-fI-ee8.title" = "VirtualSMC";

/* Class = "NSMenuItem"; title = "Query"; ObjectID = "EOj-0x-mOs"; */
"EOj-0x-mOs.title" = "Query";

/* Class = "NSTextFieldCell"; title = "LegacyBiosDefaultEntry"; ObjectID = "Gvt-XE-woX"; */
"Gvt-XE-woX.title" = "LegacyBiosDefaultEntry";

/* Class = "NSButtonCell"; title = "-1"; ObjectID = "HoS-n3-HO4"; */
"HoS-n3-HO4.title" = "-1";

/* Class = "NSButtonCell"; title = "NoEarlyProgress"; ObjectID = "ITR-6n-URu"; */
"ITR-6n-URu.title" = "NoEarlyProgress";

/* Class = "NSMenuItem"; title = "NoVPAJpeg"; ObjectID = "IiY-em-gOI"; */
"IiY-em-gOI.title" = "NoVPAJpeg";

/* Class = "NSMenu"; title = "Lilu"; ObjectID = "Ire-cK-fmx"; */
"Ire-cK-fmx.title" = "Lilu";

/* Class = "NSSegmentedControl"; ibShadowedToolTip = "<key>XMPDetection</key>\n<true/> OR <false/> OR <string>Yes/No</string>\nDetect best eXtreme Memory Profile when detecting memory or disable XMP detection.\n\n<key>XMPDetection</key>\n<integer>1/2</integer>"; ObjectID = "Jix-7R-EdR"; */
"Jix-7R-EdR.ibShadowedToolTip" = "<key>XMPDetection</key>\n<true/> OR <false/> OR <string>Yes/No</string>\nDetect best eXtreme Memory Profile when detecting memory or disable XMP detection.\n\n<key>XMPDetection</key>\n<integer>1/2</integer>";

/* Class = "NSButton"; ibShadowedToolTip = "A data leak issue was identified in the hibernation code, allowing hibernation encryption key to be passed to the system through RTC and preserved till the next hibernation without a subsequent erase. More details could be found in this message. To workaround this issue a new option enabling RTC memory erase upon waking from hibernation was added:\nBoot → RtcHibernateAware﻿﻿ = YES (BOOLEAN, off by default)\n \nThis option relies on a poorly documented (or rather undocumented) RTC memory access, and unspecified RTC memory layout, which is implementation-specific. While it is extremely recommended to be turned on if you rely on hibernation, it may not work on your hardware (should be fine on Ivy Bridge and newer at least), and is thus optional and disabled by default.\n \nNote, that AppleRTC or FixRTC patches effectively break hibernation by reducing the available RTC memory and avoiding encryption key preservation. You should DISABLE them if you have no issues with BIOS preferences afterwards or use HibernationFixup. However, if RtcHibernateAware does not work for you, enabling AppleRTC patch and using HibernationFixup may be a safer workaround."; ObjectID = "Jl7-Yz-DVL"; */
"Jl7-Yz-DVL.ibShadowedToolTip" = "A data leak issue was identified in the hibernation code, allowing hibernation encryption key to be passed to the system through RTC and preserved till the next hibernation without a subsequent erase. More details could be found in this message. To workaround this issue a new option enabling RTC memory erase upon waking from hibernation was added:\nBoot → RtcHibernateAware﻿﻿ = YES (BOOLEAN, off by default)\n \nThis option relies on a poorly documented (or rather undocumented) RTC memory access, and unspecified RTC memory layout, which is implementation-specific. While it is extremely recommended to be turned on if you rely on hibernation, it may not work on your hardware (should be fine on Ivy Bridge and newer at least), and is thus optional and disabled by default.\n \nNote, that AppleRTC or FixRTC patches effectively break hibernation by reducing the available RTC memory and avoiding encryption key preservation. You should DISABLE them if you have no issues with BIOS preferences afterwards or use HibernationFixup. However, if RtcHibernateAware does not work for you, enabling AppleRTC patch and using HibernationFixup may be a safer workaround.";

/* Class = "NSMenuItem"; title = "BT4LEContiunityFixup"; ObjectID = "JvT-TG-4fW"; */
"JvT-TG-4fW.title" = "BT4LEContiunityFixup";

/* Class = "NSMenuItem"; title = "AirportBrcmFixup"; ObjectID = "Khl-1I-Gnb"; */
"Khl-1I-Gnb.title" = "AirportBrcmFixup";

/* Class = "NSMenuItem"; title = "Lilu"; ObjectID = "Lqm-8F-U7g"; */
"Lqm-8F-U7g.title" = "Lilu";

/* Class = "NSPopUpButton"; ibShadowedToolTip = "<key>Legacy</key>\n<string>PBR</string>\nNecessary for loading old versions of Windows and Linux. Greatly depends on hardware and BIOS. Several algorithms were developed to allow customisation:\n\nLegacyBiosDefault - for UEFI BIOS variants containing protocol LegacyBios\nPBRtest - PBR boot algorithm\nPBR - Another PBR boot algorithm\nAdditionally for UEFI boot you may specify which HDD to boot (not only the first one).\n\n<key>Legacy</key>\n<string>LegacyBiosDefault</string>\n<key>LegacyBiosDefaultEntry</key>\n<integer>2</integer>"; ObjectID = "MRU-pn-ell"; */
"MRU-pn-ell.ibShadowedToolTip" = "<key>Legacy</key>\n<string>PBR</string>\nNecessary for loading old versions of Windows and Linux. Greatly depends on hardware and BIOS. Several algorithms were developed to allow customisation:\n\nLegacyBiosDefault - for UEFI BIOS variants containing protocol LegacyBios\nPBRtest - PBR boot algorithm\nPBR - Another PBR boot algorithm\nAdditionally for UEFI boot you may specify which HDD to boot (not only the first one).\n\n<key>Legacy</key>\n<string>LegacyBiosDefault</string>\n<key>LegacyBiosDefaultEntry</key>\n<integer>2</integer>";

/* Class = "NSMenuItem"; title = "HibernationFixup"; ObjectID = "N28-LK-r8e"; */
"N28-LK-r8e.title" = "HibernationFixup";

/* Class = "NSTextFieldCell"; title = "Timeout"; ObjectID = "NVa-Le-yYd"; */
"NVa-Le-yYd.title" = "Timeout";

/* Class = "NSMenuItem"; title = "Insert"; ObjectID = "Ojg-Ia-FpJ"; */
"Ojg-Ia-FpJ.title" = "Insert";

/* Class = "NSMenuItem"; title = "AppleALC"; ObjectID = "Qjs-bc-IMG"; */
"Qjs-bc-IMG.title" = "AppleALC";

/* Class = "NSTableColumn"; headerCell.title = "Blacklist"; ObjectID = "Qlg-b6-nVV"; */
"Qlg-b6-nVV.headerCell.title" = "Blacklist";

/* Class = "NSMenuItem"; title = "VirtualSMC"; ObjectID = "RFG-PW-JPZ"; */
"RFG-PW-JPZ.title" = "VirtualSMC";

/* Class = "NSMenu"; title = "Help"; ObjectID = "Ry8-9p-YDp"; */
"Ry8-9p-YDp.title" = "Help";

/* Class = "NSButtonCell"; title = "SkipHibernateTimeout"; ObjectID = "SdU-aA-UIx"; */
"SdU-aA-UIx.title" = "SkipHibernateTimeout";

/* Class = "NSMenuItem"; title = "LegacyBiosDefault"; ObjectID = "UVS-vq-1uM"; */
"UVS-vq-1uM.title" = "LegacyBiosDefault";

/* Class = "NSBox"; title = "Secure Boot"; ObjectID = "Uer-pj-fqj"; */
"Uer-pj-fqj.title" = "Secure Boot";

/* Class = "NSComboBox"; ibShadowedToolTip = "<key>DefaultVolume</key>\n<string>MacHDD</string>\nDefaultVolume is used to specify which entry is the default boot entry in Clover GUI. See also DefaultLoader. It can be set to:\n\nVolume Name - The name of the volume. E.g. Macintosh.\nGUID - Globally Unique ID of the volume shown in Clover's boot, preboot or debug log. E.g. 57272A5A-7EFE-4404-9CDA-C33761D0DB3C.\nPart of Device Path - Also shown in Clover's logs. E.g. HD(1,GPT,57272A5A-7EFE-4404-9CDA-C33761D0DB3C,0x800,0xFF000).\nLastBootedVolume - The last booted volume will be set as default one in Clover GUI.\nOS X Startup Disk can be used to reboot into another volume, but for the following reboot DefaultVolume will be used again."; ObjectID = "W4Z-vf-9Gr"; */
"W4Z-vf-9Gr.ibShadowedToolTip" = "<key>DefaultVolume</key>\n<string>MacHDD</string>\nDefaultVolume is used to specify which entry is the default boot entry in Clover GUI. See also DefaultLoader. It can be set to:\n\nVolume Name - The name of the volume. E.g. Macintosh.\nGUID - Globally Unique ID of the volume shown in Clover's boot, preboot or debug log. E.g. 57272A5A-7EFE-4404-9CDA-C33761D0DB3C.\nPart of Device Path - Also shown in Clover's logs. E.g. HD(1,GPT,57272A5A-7EFE-4404-9CDA-C33761D0DB3C,0x800,0xFF000).\nLastBootedVolume - The last booted volume will be set as default one in Clover GUI.\nOS X Startup Disk can be used to reboot into another volume, but for the following reboot DefaultVolume will be used again.";

/* Class = "NSMenuItem"; title = "PBRtest"; ObjectID = "WP8-OS-C6F"; */
"WP8-OS-C6F.title" = "PBRtest";

/* Class = "NSTableView"; ibShadowedToolTip = "<key>Arguments</key>\n<string>ARGUMENTS</string>\nAt this section you can add \"Boot Flags\" and \"Kernel Flags\" to be used by the system... Here we will list only Clover's proprietary \"Boot Flags\", different flags, like for example, npci=0x2000, npci=0x3000, darkwake=0, etc..., should work as expected...\n\n-v - Verbose Boot.\n-s - Boot OS X into Single User Mode.\n-x - Boot OS X into SafeBoot (Safe Mode).\nMountEFI=yes/diskX - Mount EFI partition at every boot or from disk X (X = disk number).\nLogLineCount=0 - Set maximum number of lines for log file, default 0 (no Limit).\nLogLocation=PATH - Set the path for the log files to be saved.\nLogEveryBoot=Yes/No\t- Save log files at every boot."; ObjectID = "WTT-ia-xfP"; */
"WTT-ia-xfP.ibShadowedToolTip" = "<key>Arguments</key>\n<string>ARGUMENTS</string>\nAt this section you can add \"Boot Flags\" and \"Kernel Flags\" to be used by the system... Here we will list only Clover's proprietary \"Boot Flags\", different flags, like for example, npci=0x2000, npci=0x3000, darkwake=0, etc..., should work as expected...\n\n-v - Verbose Boot.\n-s - Boot OS X into Single User Mode.\n-x - Boot OS X into SafeBoot (Safe Mode).\nMountEFI=yes/diskX - Mount EFI partition at every boot or from disk X (X = disk number).\nLogLineCount=0 - Set maximum number of lines for log file, default 0 (no Limit).\nLogLocation=PATH - Set the path for the log files to be saved.\nLogEveryBoot=Yes/No\t- Save log files at every boot.";

/* Class = "NSButton"; ibShadowedToolTip = "<key>Secure</key>\n<true/>\nSecure Boot protocol, a contorversial subject, will restrict the booting process to signed binaries only. By enabling this option in your BIOS, booting of many operating systems won't be possible anymore, except Windows 8, 2013 and some Linux distributions.\n\nThe aim is to use Clover while Secure Boot is enabled. Clover's binary will need to be signed and a certificate to be loaded."; ObjectID = "WsY-WH-EMR"; */
"WsY-WH-EMR.ibShadowedToolTip" = "<key>Secure</key>\n<true/>\nSecure Boot protocol, a contorversial subject, will restrict the booting process to signed binaries only. By enabling this option in your BIOS, booting of many operating systems won't be possible anymore, except Windows 8, 2013 and some Linux distributions.\n\nThe aim is to use Clover while Secure Boot is enabled. Clover's binary will need to be signed and a certificate to be loaded.";

/* Class = "NSMenuItem"; title = "WhateverGreen"; ObjectID = "X4c-7u-z8H"; */
"X4c-7u-z8H.title" = "WhateverGreen";

/* Class = "NSButton"; ibShadowedToolTip = "<key>Fast</key>\n<true/>\nSimilar to setting Timeout to 0 but: * nvram.plist will be searched only until first occurrence * does not search for the best video mode * does not load themes and graphics * no chance to enter the GUI\n\nHaving this parameter enabled might not really have any big effect.\nInstead, you can try a custom compilation: * disable GUI in CloverEFI (3 seconds difference) * only search for Sata0 drivers (9 seconds difference)"; ObjectID = "XJt-ur-AbR"; */
"XJt-ur-AbR.ibShadowedToolTip" = "<key>Fast</key>\n<true/>\nSimilar to setting Timeout to 0 but: * nvram.plist will be searched only until first occurrence * does not search for the best video mode * does not load themes and graphics * no chance to enter the GUI\n\nHaving this parameter enabled might not really have any big effect.\nInstead, you can try a custom compilation: * disable GUI in CloverEFI (3 seconds difference) * only search for Sata0 drivers (9 seconds difference)";

/* Class = "NSButton"; ibShadowedToolTip = "Strict Hibernation, requires  UEFI, a real NVRAM, a GPT with ESP and a hibernate mode 25"; ObjectID = "XaP-uv-pDa"; */
"XaP-uv-pDa.ibShadowedToolTip" = "Strict Hibernation, requires  UEFI, a real NVRAM, a GPT with ESP and a hibernate mode 25";

/* Class = "NSMenu"; title = "Flyout"; ObjectID = "Y8c-at-bAF"; */
"Y8c-at-bAF.title" = "Flyout";

/* Class = "NSTableColumn"; headerCell.title = "Boot Arguments (right click context menu)"; ObjectID = "Ydc-N3-vnt"; */
"Ydc-N3-vnt.headerCell.title" = "Boot Arguments (right click context menu)";

/* Class = "NSButtonCell"; title = "NeverHibernate"; ObjectID = "ZEU-EH-nUA"; */
"ZEU-EH-nUA.title" = "NeverHibernate";

/* Class = "NSMenuItem"; title = "NoTouchID"; ObjectID = "al6-jV-xks"; */
"al6-jV-xks.title" = "NoTouchID";

/* Class = "NSMenu"; title = "NoTouchID"; ObjectID = "c4Q-IC-Ez0"; */
"c4Q-IC-Ez0.title" = "NoTouchID";

/* Class = "NSTableView"; ibShadowedToolTip = "Black list for Secure Boot (not allowed). Policy must be set to BlackList"; ObjectID = "d4m-0h-hax"; */
"d4m-0h-hax.ibShadowedToolTip" = "Black list for Secure Boot (not allowed). Policy must be set to BlackList";

/* Class = "NSButton"; ibShadowedToolTip = "<key>NeverHibernate</key>\n<true/>\nDisables the hibernation state detection."; ObjectID = "dLU-KX-GK6"; */
"dLU-KX-GK6.ibShadowedToolTip" = "<key>NeverHibernate</key>\n<true/>\nDisables the hibernation state detection.";

/* Class = "NSComboBox"; ibShadowedToolTip = "<key>CustomLogo</key>\n<true/> OR <false/> OR <string>Apple/Alternate/Theme/None/Path</string> OR <data>PNG/BMP/ICNS base64 data</data>\nEnable the drawing of the custom boot logo.\n\ntrue - Uses the default boot style, Apple.\nfalse - Disables custom boot logo.\nApple - Use the default gray on gray apple logo.\nAlternate - Use the alternate white on black apple logo.\nTheme - Use the theme boot screen for entry type - NOT IMPLEMENTED.\nNone - Use no logo only background color, gray if not specified by custom entry.\nPath - A file path to load a custom image from\n<data> - A base64 encoded PNG, BMP, or ICNS data.\nIf no option is specified then the boot screen will be drawn only for >= 10.10 Yosemite, so it remains compatible with previous behavior.\n\nThe CustomLogo key can also be used under GUI/Custom/Entries in conjunction with BootBgColor for a different screen for every OS. However, the graphics output protocol is not in anyway modified so if the OS draws after it is started then it is after the boot screen is drawn and will overwrite the custom logo, at least for now."; ObjectID = "dq6-TB-u6t"; */
"dq6-TB-u6t.ibShadowedToolTip" = "<key>CustomLogo</key>\n<true/> OR <false/> OR <string>Apple/Alternate/Theme/None/Path</string> OR <data>PNG/BMP/ICNS base64 data</data>\nEnable the drawing of the custom boot logo.\n\ntrue - Uses the default boot style, Apple.\nfalse - Disables custom boot logo.\nApple - Use the default gray on gray apple logo.\nAlternate - Use the alternate white on black apple logo.\nTheme - Use the theme boot screen for entry type - NOT IMPLEMENTED.\nNone - Use no logo only background color, gray if not specified by custom entry.\nPath - A file path to load a custom image from\n<data> - A base64 encoded PNG, BMP, or ICNS data.\nIf no option is specified then the boot screen will be drawn only for >= 10.10 Yosemite, so it remains compatible with previous behavior.\n\nThe CustomLogo key can also be used under GUI/Custom/Entries in conjunction with BootBgColor for a different screen for every OS. However, the graphics output protocol is not in anyway modified so if the OS draws after it is started then it is after the boot screen is drawn and will overwrite the custom logo, at least for now.";

/* Class = "NSTextFieldCell"; title = "Default Loader"; ObjectID = "et6-q0-0PN"; */
"et6-q0-0PN.title" = "Default Loader";

/* Class = "NSTextFieldCell"; title = "Default Boot Volume"; ObjectID = "fba-fN-Cn7"; */
"fba-fN-Cn7.title" = "Default Boot Volume";

/* Class = "NSMenuItem"; title = "NoTouchID"; ObjectID = "fip-d9-JxS"; */
"fip-d9-JxS.title" = "NoTouchID";

/* Class = "NSMenu"; title = "HibernationFixup"; ObjectID = "frj-Ko-Lo2"; */
"frj-Ko-Lo2.title" = "HibernationFixup";

/* Class = "NSMenuItem"; title = "AppleALC"; ObjectID = "hnw-qo-35j"; */
"hnw-qo-35j.title" = "AppleALC";

/* Class = "NSButtonCell"; title = "NeverDoRecovery"; ObjectID = "jh2-eR-76U"; */
"jh2-eR-76U.title" = "NeverDoRecovery";

/* Class = "NSButtonCell"; title = "RtcHibernateAware"; ObjectID = "jwf-st-2MV"; */
"jwf-st-2MV.title" = "RtcHibernateAware";

/* Class = "NSMenu"; title = "CPUFriend"; ObjectID = "kXC-fw-85N"; */
"kXC-fw-85N.title" = "CPUFriend";

/* Class = "NSBox"; title = "Box"; ObjectID = "l3C-ey-dfa"; */
"l3C-ey-dfa.title" = "Box";

/* Class = "NSMenuItem"; title = "PBR"; ObjectID = "lbM-Xa-rwD"; */
"lbM-Xa-rwD.title" = "PBR";

/* Class = "NSButtonCell"; title = "HibernationFixup"; ObjectID = "luL-iz-gj0"; */
"luL-iz-gj0.title" = "HibernationFixup";

/* Class = "NSMenu"; title = "WhateverGreen"; ObjectID = "nCx-ic-EeX"; */
"nCx-ic-EeX.title" = "WhateverGreen";

/* Class = "NSButtonCell"; title = "StrictHibernate"; ObjectID = "oaS-cB-35Q"; */
"oaS-cB-35Q.title" = "StrictHibernate";

/* Class = "NSMenuItem"; title = "Help"; ObjectID = "ofj-iB-WDq"; */
"ofj-iB-WDq.title" = "Help";

/* Class = "NSTextFieldCell"; title = "CustomLogo"; ObjectID = "onm-eg-9us"; */
"onm-eg-9us.title" = "CustomLogo";

/* Class = "NSButtonCell"; title = "Debug"; ObjectID = "pXP-2b-zmv"; */
"pXP-2b-zmv.title" = "Debug";

/* Class = "NSMenuItem"; title = "WhateverGreen"; ObjectID = "rIp-zF-19W"; */
"rIp-zF-19W.title" = "WhateverGreen";

/* Class = "NSMenuItem"; title = "WhiteList"; ObjectID = "rNu-rl-Krf"; */
"rNu-rl-Krf.title" = "WhiteList";

/* Class = "NSMenu"; title = "AppleALC"; ObjectID = "rUy-Aj-ZWa"; */
"rUy-Aj-ZWa.title" = "AppleALC";

/* Class = "NSButton"; ibShadowedToolTip = "Hide some debug messages while Clover is loading"; ObjectID = "sj2-ly-IP6"; */
"sj2-ly-IP6.ibShadowedToolTip" = "Hide some debug messages while Clover is loading";

/* Class = "NSMenu"; title = "VirtualSMC"; ObjectID = "t1z-iP-Dzt"; */
"t1z-iP-Dzt.title" = "VirtualSMC";

/* Class = "NSBox"; title = "Box"; ObjectID = "tzA-gb-3b0"; */
"tzA-gb-3b0.title" = "Box";

/* Class = "NSTextField"; ibShadowedToolTip = "<key>DefaultLoader</key>\n<string>BOOTX64.efi</string>\nIn addition to DefaultVolume above, the path of the loader can be specified as DefaultLoader. This provides more precise default entry selection for Volumes that have multiple Loaders. The value can be the complete path or a unique portion like like file name."; ObjectID = "uqt-fc-Hj8"; */
"uqt-fc-Hj8.ibShadowedToolTip" = "<key>DefaultLoader</key>\n<string>BOOTX64.efi</string>\nIn addition to DefaultVolume above, the path of the loader can be specified as DefaultLoader. This provides more precise default entry selection for Volumes that have multiple Loaders. The value can be the complete path or a unique portion like like file name.";

/* Class = "NSMenuItem"; title = "BlackList"; ObjectID = "vn5-BG-G06"; */
"vn5-BG-G06.title" = "BlackList";

/* Class = "NSMenu"; title = "Darkwake"; ObjectID = "w1M-eM-aS4"; */
"w1M-eM-aS4.title" = "Darkwake";

/* Class = "NSMenuItem"; title = "AirportBrcmFixup"; ObjectID = "wWA-vE-IK5"; */
"wWA-vE-IK5.title" = "AirportBrcmFixup";

/* Class = "NSMenuItem"; title = "Darkwake"; ObjectID = "xuD-AH-gjZ"; */
"xuD-AH-gjZ.title" = "Darkwake";

/* Class = "NSTextFieldCell"; title = "Legacy"; ObjectID = "ykO-wZ-KUy"; */
"ykO-wZ-KUy.title" = "Legacy";
